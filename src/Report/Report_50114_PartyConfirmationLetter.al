Report 50114 "Party confirmation letters"
{

    DefaultLayout = RDLC;
    RDLCLayout = './Layouts/Partyconfirmationletters.rdl';

    dataset
    {
        dataitem("Vendor Ledger Entry"; "Vendor Ledger Entry")
        {
            //	column(ReportForNavId_1000000000; 1000000000) {} // Autogenerated by ForNav - Do not delete
            //	column(ReportForNav_Table25; ReportForNavWriteDataItem('Table25',UnknownTable25)) {}
            column(EntryNo; "Entry No.")
            {
            }
            column(Amount; Amount)
            {
            }

            column(Desc; Narration)
            {
            }
            column(PostingDate; "Posting Date")
            {
            }
            column(DocType; "Document Type")
            {
            }
            column(VendorName; VendorName)
            {
            }
            column(FromDate; Fromdate)
            {
            }
            column(ToDate; ToDate)
            {
            }
            column(DocNo; "Document No.")
            {
            }
            column(Compname; CompanyInfo.Name)
            {
            }
            column(CompAdd; CompanyInfo.Address)
            {
            }
            column(CompAdd2; CompanyInfo."Address 2")
            {
            }
            column(CompCity; CompanyInfo.City)
            {
            }
            column(Comppostcode; CompanyInfo."Post Code")
            {
            }
            column(CIN; CompanyInfo."Registration No.")
            {
            }
            column(Comppan; CompanyInfo."P.A.N. No.")
            {
            }
            column(CompGST; CompanyInfo."GST Registration No.")
            {
            }
            column(VendPan; Vendor."P.A.N. No.")
            {
            }
            column(VendAdd; Vendor.Address)
            {
            }
            column(VendAdd2; Vendor."Address 2")
            {
            }
            column(VendCity; Vendor.City)
            {
            }
            column(VendPostCode; Vendor."Post Code")
            {
            }
            column(Vendgstin; Vendor."GST Registration No.")
            {
            }
            column(PrintingDate; PrintingDate)
            {
            }
            column(Body1; Body1)
            {
            }
            column(Body2; Body2)
            {
            }
            column(ExtInvNo; "External Document No.")
            {
            }
            column(OpeningBalance; Openingbalance)
            {
            }
            column(DebitAmt; "Debit Amount")
            {
            }
            column(Creditamt; "Credit Amount")
            {
            }
            column(totaldebitamt; TotalDebitAmt)
            {
            }
            column(totalcreditamt; TotalCreditAmt)
            {
            }
            column(ClosingBalance1; CloBalance1)
            {
            }
            column(ClosingBalance2; CloBalance2)
            {
            }
            column(FinalAmt; FinalAmt)
            {
            }
            dataitem("G/L Entry"; "G/L Entry")
            {
                DataItemLink = "Document No." = field("Document No."), "Document Type" = field("Document Type");
                column(GLName; "G/L Account Name")
                {
                }
                column(GLAMT; Amount)
                {
                }
                column(DrCr; "Dr/Cr")
                {
                }
                trigger OnPreDataItem();
                begin
                    //	ReportForNav.OnPreDataItem('Table17',UnknownTable17);
                end;

                trigger OnAfterGetRecord();
                begin
                    if "G/L Entry".Amount < 0 then
                        "Dr/Cr" := 'Cr'
                    else
                        "Dr/Cr" := 'Dr';
                end;

            }
            trigger OnPreDataItem();
            begin
                if (Fromdate = 0D) or (ToDate = 0D) then
                    Error('Invalid Date');
                "Vendor Ledger Entry".SetRange("Posting Date", Fromdate, ToDate);
                if vendorNo = '' then
                    Error('Select Vendor No.');
                TotalInvoiceAmt := 0;
                TotalPaymentAmt := 0;
                Openingbalance := 0;
                if ReversedEntry = false then
                    "Vendor Ledger Entry".SetRange(Reversed, false);
                "Vendor Ledger Entry".SetRange("Vendor No.", vendorNo);
                VLE.Reset();
                VLE.SetRange("Vendor No.", vendorNo);
                VLE.SetFilter("Posting Date", '<%1', Fromdate);
                if VLE.Find('-') then
                    repeat
                        VLE.CalcFields("Original Amount");
                        Openingbalance := Openingbalance + VLE."Original Amount";
                    until VLE.Next = 0;
                TotalCreditAmt := 0;
                TotalDebitAmt := 0;
                //	ReportForNav.OnPreDataItem('Table25',UnknownTable25);
            end;

            trigger OnAfterGetRecord();
            begin
                Narration := '';
                "Vendor Ledger Entry".CalcFields(Amount);
                if Vendor.Get("Vendor Ledger Entry"."Vendor No.") then
                    VendorName := Vendor.Name;
                if "Vendor Ledger Entry"."Document Type" = "Vendor Ledger Entry"."document type"::Invoice then
                    TotalInvoiceAmt := TotalInvoiceAmt + "Vendor Ledger Entry".Amount
                else if "Vendor Ledger Entry"."Document Type" = "Vendor Ledger Entry"."document type"::Payment then
                    TotalPaymentAmt := TotalPaymentAmt + "Vendor Ledger Entry".Amount;
                TotalCreditAmt := TotalCreditAmt + "Vendor Ledger Entry"."Credit Amount";
                TotalDebitAmt := TotalDebitAmt + "Vendor Ledger Entry"."Debit Amount";
                PCL.Reset();
                PCL.SetRange("No.", "Vendor Ledger Entry"."Document No.");
                if PCL.Find('-') then
                    Narration := PCL.Comment;
                if "Vendor Ledger Entry".Comment = '' then begin
                    GLEntry.Reset();
                    GLEntry.SetRange("Document No.", "Vendor Ledger Entry"."Document No.");
                    if GLEntry.Find('-') then
                        Narration := Narration + ' ' + GLEntry.Comment;
                end else
                    Narration := Narration + ' ' + "Vendor Ledger Entry".Comment;
                FinalAmt := 0;
                CloBalance1 := 0;
                CloBalance2 := 0;
                if Openingbalance > 0 then begin
                    if (TotalDebitAmt + Openingbalance) > TotalCreditAmt then begin
                        FinalAmt := TotalDebitAmt + Openingbalance;
                        CloBalance2 := FinalAmt - TotalCreditAmt;
                    end else begin
                        FinalAmt := TotalCreditAmt;
                        CloBalance1 := FinalAmt - (TotalDebitAmt + Openingbalance)
                    end;
                end else begin
                    if (TotalDebitAmt) > (TotalCreditAmt + Abs(Openingbalance)) then begin
                        FinalAmt := TotalDebitAmt;
                        CloBalance2 := FinalAmt - (TotalCreditAmt + Abs(Openingbalance));
                    end else begin
                        FinalAmt := TotalCreditAmt + Abs(Openingbalance);
                        CloBalance1 := FinalAmt - TotalDebitAmt;
                    end;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                field("From Date"; Fromdate)
                {
                    ApplicationArea = Basic;
                }
                field("To Date"; ToDate)
                {
                    ApplicationArea = Basic;
                }
                field("Vendor No."; vendorNo)
                {
                    ApplicationArea = Basic;
                    TableRelation = Vendor;
                }
                field(Text1; Body1)
                {
                    ApplicationArea = Basic;
                }
                field(Text2; Body2)
                {
                    ApplicationArea = Basic;
                }
                field("Printing Date"; PrintingDate)
                {
                    ApplicationArea = Basic;
                }
                field("Reversed Entry"; ReversedEntry)
                {
                    ApplicationArea = Basic;
                }
            }
        }

    }

    trigger OnPreReport()
    begin
        CompanyInfo.Get;
        //FixedBody :=  Body1 + ' ' + Body2;


    end;

    var
        Vendor: Record Vendor;
        VendorName: Text;
        Fromdate: Date;
        ToDate: Date;
        CompanyInfo: Record "Company Information";
        "Dr/Cr": Text;
        TotalInvoiceAmt: Decimal;
        TotalPaymentAmt: Decimal;
        Body1: Text[250];
        Body2: Text[250];
        PrintingDate: Date;
        PredefinedBody: Boolean;
        FixedBody: Text[250];
        ReversedEntry: Boolean;
        vendorNo: Code[20];
        Openingbalance: Decimal;
        VLE: Record "Vendor Ledger Entry";
        Narration: Text;
        PCL: Record "Purch. Comment Line";
        GLEntry: Record "G/L Entry";
        TotalDebitAmt: Decimal;
        TotalCreditAmt: Decimal;
        FinalAmt: Decimal;
        CloBalance1: Decimal;
        CloBalance2: Decimal;

    trigger OnInitReport();
    begin

    end;

}
